C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE DETECT
OBJECT MODULE PLACED IN detect.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe detect.c DB OE BR

line level    source

   1          /*
   2          串口0负责接收磁罗盘输出的数据，串口1负责将系统的数据输出到上位机。
   3          
   4          串口0采用中断接收。发送都采用查询模式。
   5          
   6          
   7          SPI负责接收两个单轴倾角传感器的输出信号。
   8          
   9          时序为方式0，即常态为低电平，上升沿读写。
  10          
  11          */
  12          
  13          #include "C8051F120.h"
  14          #include <math.h>
  15          #include <intrins.h>                     // _nop_()的头文件
  16          
  17          //延时函数
  18          void Delay_us(unsigned int times);//最大65535 uS
  19          void Delay_ms(unsigned int times);//最大65535 mS
  20          
  21          //控制信号定义
  22          sbit CS0 = P4^0;         //片选0
  23          sbit CS1 = P4^1;         //片选1
  24          
  25          //SPI通信函数
  26          void SPI_WriteData(unsigned char val);
  27          void SPI_Read();
  28          
  29          //命令定义
  30          #define RDAX 0x10 
  31          #define RDAY 0x11
  32          
  33          //串口0子程序定义
  34          void UART0_isr ();                     //串口0接收中断服务子程序
  35          void send_char_com0(unsigned char ch0); //串口0发送程序(单字节命令) 
  36          
  37          //接收数据定义
  38          #define  INBUF_LEN 20                  //数据帧长度
  39          unsigned char inbuf0[INBUF_LEN];          //字符串定义
  40          unsigned char count0 ;                    //计数值
  41          unsigned char read_flag0;                    //串口0取数标志
  42          
  43          //串口1子程序定义
  44          void send_char_com1(unsigned char ch1); //串口1发送程序(单字节) 
  45          void send_string_com1(unsigned char *str1,unsigned int strlen1);        //向串口1发送一个字符串
  46          
  47          //发送数据定义
  48          #define  OUTBUF_LEN 10                  //输出字符串的字节数
  49          unsigned char outbuf1[OUTBUF_LEN];              //输出字符串定义，名为字符数组，实为五个无符号整数组成的数组
  50          unsigned char outtemp1[4];                      //临时存放空间
  51          unsigned char OUTBUF_P;                //当前位置
  52          
  53          //测量函数
  54          void Measure_angle();           //测倾角
  55          void Measure_MEMS();           //测磁偏角
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 2   

  56          
  57          //***********************************************
  58          //串口0接收中断函数 
  59          void UART0_isr () interrupt 4      //中断号
  60          {                                                                          //中断自动跳转和返回寄存器页
  61   1          if(RI0)                                                       //检测到输入
  62   1          {
  63   2              RI0 = 0;                                          //清标志位
  64   2                      inbuf0[count0] = SBUF0;       //读缓存
  65   2                      count0++;
  66   2      
  67   2              if(count0==(INBUF_LEN))
  68   2              {                                               
  69   3               read_flag0 = 1;  //如果串口接收的数据达到INBUF_LEN个，就置位取数标志                             
             -    
  70   3               }
  71   2          }
  72   1      }
  73          //向串口0发送一个字符 
  74          void send_char_com0(unsigned char ch0)  
  75          {
  76   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
  77   1      
  78   1          SFRPAGE   = UART0_PAGE;   //跳转到串口0的寄存器页
  79   1          SBUF0 = ch0;
  80   1          while(TI0==0);
  81   1          TI0 = 0;
  82   1      
  83   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
  84   1      }
  85          
  86          //***********************************************
  87          
  88          //向串口1发送一个字符 
  89          void send_char_com1(unsigned char ch1)  
  90          {
  91   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
  92   1      
  93   1          SFRPAGE   = UART1_PAGE;   //跳转到串口1的寄存器页
  94   1          SBUF1 = ch1;
  95   1          while(TI1==0);
  96   1          TI1 = 0;
  97   1      
  98   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
  99   1      }
 100          
 101          //向串口1发送一个字符串，strlen为该字符串长度(字节的个数) 
 102          void send_string_com1(unsigned char *str1,unsigned int strlen1)
 103          {
 104   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 105   1      
 106   1          unsigned int j=0;
 107   1      
 108   1          do 
 109   1          {
 110   2              send_char_com1(*(str1 + j));
 111   2              j++;
 112   2          } while(j < strlen1);
 113   1      
 114   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 115   1      }
 116          
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 3   

 117          //***********************************************
 118          // the SPI protocol.  SCK is idle-low, and bits are latched on SCK rising.
 119          
 120          //向SPI器件写入单字节数据
 121          void SPI_WriteData(unsigned char val)
 122          {
 123   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 124   1      
 125   1              SFRPAGE   = SPI0_PAGE;
 126   1              SPI0DAT = val;
 127   1          while(!SPIF);
 128   1          SPIF = 0;
 129   1      
 130   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 131   1      }
 132          //从SPI器件读取两个字节数据（因为数据长度是11位）
 133          void SPI_Read()
 134          {
 135   1               char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 136   1      
 137   1               unsigned int i;
 138   1                        
 139   1               SFRPAGE   = SPI0_PAGE;
 140   1               for(i=0;i<2;i++)
 141   1               {
 142   2                      SPI0DAT  = 0;                       // Dummy write to output serial clock
 143   2              while (!SPIF);                      // Wait for the value to be read
 144   2              SPIF = 0;
 145   2              outtemp1[OUTBUF_P++] = SPI0DAT;         //先存入临时存储区
 146   2               }
 147   1      
 148   1               SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 149   1      }
 150          //***********************************************
 151          
 152          //重置源初始化
 153          void Reset_Sources_Init()
 154          {
 155   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 156   1      
 157   1          WDTCN     = 0xDE;
 158   1          WDTCN     = 0xAD;
 159   1          SFRPAGE   = LEGACY_PAGE;
 160   1          RSTSRC    = 0x02;
 161   1      
 162   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 163   1      }
 164          
 165          //计数器初始化
 166          //串口0波特率9600，串口1波特率115200
 167          void Timer_Init()
 168          {
 169   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 170   1      
 171   1          SFRPAGE   = TIMER01_PAGE;
 172   1          TCON      = 0x40;
 173   1          TMOD      = 0x20;
 174   1          CKCON     = 0x10;
 175   1          TH1       = 0x96;
 176   1          SFRPAGE   = TMR2_PAGE;
 177   1          TMR2CN    = 0x04;
 178   1          TMR2CF    = 0x08;
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 4   

 179   1          RCAP2L    = 0x60;
 180   1          RCAP2H    = 0xFF;
 181   1      
 182   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 183   1      }
 184          
 185          //串口初始化
 186          void UART_Init()
 187          {
 188   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 189   1      
 190   1          SFRPAGE   = UART0_PAGE;
 191   1          SCON0     = 0x50;
 192   1          SSTA0     = 0x05;
 193   1          SFRPAGE   = UART1_PAGE;
 194   1          SCON1     = 0x50;
 195   1      
 196   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 197   1      }
 198          
 199          
 200          //SPI初始化，200k
 201          void SPI_Init()
 202          {
 203   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 204   1      
 205   1          SFRPAGE   = SPI0_PAGE;
 206   1          SPI0CFG   = 0x40;
 207   1          SPI0CN    = 0x0D;
 208   1          SPI0CKR   = 0x3C;
 209   1      
 210   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 211   1      }
 212          
 213          //交叉开关端口定义
 214          void Port_IO_Init()
 215          {
 216   1          // P0.0  -  TX0 (UART0), Push-Pull,  Digital
 217   1          // P0.1  -  RX0 (UART0), Open-Drain, Digital
 218   1          // P0.2  -  SCK  (SPI0), Push-Pull,  Digital
 219   1          // P0.3  -  MISO (SPI0), Open-Drain, Digital
 220   1          // P0.4  -  MOSI (SPI0), Push-Pull,  Digital
 221   1          // P0.5  -  NSS  (SPI0), Open-Drain, Digital
 222   1          // P0.6  -  TX1 (UART1), Push-Pull,  Digital
 223   1          // P0.7  -  RX1 (UART1), Open-Drain, Digital
 224   1      
 225   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 226   1      
 227   1          SFRPAGE   = CONFIG_PAGE;     //总体允许弱上拉
 228   1          P0MDOUT   = 0x55;
 229   1          P4MDOUT   = 0x03;                    //P0.0和P0.1配置成推挽输出
 230   1          XBR0      = 0x06;
 231   1          XBR2      = 0x44;
 232   1      
 233   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 234   1      }
 235          
 236          //晶振初始化
 237          void Oscillator_Init()                  
 238          {
 239   1              char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 240   1      
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 5   

 241   1          SFRPAGE   = CONFIG_PAGE;
 242   1          OSCICN    = 0x83;
 243   1      
 244   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 245   1      }
 246          
 247          
 248          //器件初始化
 249          void Init_Device(void)
 250          {
 251   1          Reset_Sources_Init();
 252   1          Timer_Init();
 253   1          UART_Init();
 254   1          SPI_Init();
 255   1          Port_IO_Init();
 256   1          Oscillator_Init();
 257   1      }
 258          
 259          
 260          //延时函数
 261          /*************************************************************************************
 262          * 函数名称：Delay_us;
 263          *
 264          * 函数功能描述：延时程序(采用外部22M晶振时)，延时时间范围：1~65535us;
 265          *
 266          * 输入参数：times: unsigned int, 延时时间变量；
 267          *
 268          * 返回数据：none；
 269          *
 270          * 注意： 延时时间最大是65535us，不要超过这个值;
 271          **************************************************************************************/
 272          void Delay_us(unsigned int times)
 273          {
 274   1          unsigned int i;
 275   1      
 276   1              for (i=0; i<times; i++)
 277   1              {
 278   2                      _nop_();
 279   2                      _nop_();
 280   2                      _nop_();
 281   2                      _nop_();
 282   2                      _nop_();
 283   2                      _nop_();
 284   2                      _nop_();
 285   2      
 286   2                      _nop_();//24.5M晶振时
 287   2                      _nop_();
 288   2              }            
 289   1      }
 290          
 291          /**************************************************************************************
 292          * 函数名称：Delay_ms;
 293          *
 294          * 函数功能描述：延时程序，延时时间范围：1~65535ms;
 295          *              
 296          * 输入参数：times: unsigned int, 延时时间变量；
 297          *
 298          * 返回数据：none；
 299          *
 300          * 注意： 延时时间最大是65535ms，不要超过这个值;
 301          **************************************************************************************/
 302          void Delay_ms(unsigned int times)
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 6   

 303          {
 304   1          unsigned int i;
 305   1      
 306   1              for (i=0; i<times; i++) 
 307   1                      Delay_us(1000); 
 308   1      }
 309          
 310          //***********************************************
 311          
 312          //测量倾角    
 313          void Measure_angle()
 314          {
 315   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 316   1              unsigned int t0,t1;
 317   1              
 318   1              SFRPAGE   = CONFIG_PAGE;                   //跳转到端口配置页面
 319   1              CS0 = 0;                                           //X轴
 320   1              SPI_WriteData(RDAX);
 321   1              SPI_Read();
 322   1              CS0 = 1;
 323   1              Delay_ms(1);
 324   1      
 325   1              CS0 = 0;
 326   1              SPI_WriteData(RDAY);
 327   1              SPI_Read();
 328   1              CS0 = 1;
 329   1              t0 = outtemp1[0]*256 + outtemp1[1];       //数据整理
 330   1              t1 = outtemp1[2]*256 + outtemp1[3];
 331   1              t0 = t0 >> 5;
 332   1              outbuf1[0] = t0 / 256;
 333   1              outbuf1[1] = t0 % 256;//取余数
 334   1              t1 = t1 >> 5;
 335   1              outbuf1[2] = t1 / 256;
 336   1              outbuf1[3] = t1 % 256;//取余数
 337   1      
 338   1              OUTBUF_P = 0;             //清0
 339   1      
 340   1              CS1 = 0;                                                //Y轴  
 341   1              SPI_WriteData(RDAX);                    
 342   1              SPI_Read();
 343   1              CS1 = 1;                     //拉低后再开始下一次测量
 344   1              Delay_ms(1);                 //延时确保稳定
 345   1      
 346   1              CS1 = 0;
 347   1              SPI_WriteData(RDAY);
 348   1              SPI_Read();
 349   1              CS1 = 1;
 350   1              t0 = outtemp1[0]*256 + outtemp1[1];       //数据整理
 351   1              t1 = outtemp1[2]*256 + outtemp1[3];
 352   1              t0 = t0 >> 5;
 353   1              outbuf1[4] = t0 / 256;
 354   1              outbuf1[5] = t0 % 256;//取余数
 355   1              t1 = t1 >> 5;
 356   1              outbuf1[6] = t1 / 256;
 357   1              outbuf1[7] = t1 % 256;//取余数
 358   1      
 359   1              OUTBUF_P = 0;             //清0
 360   1      
 361   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 362   1      }
 363          //测量磁偏角
 364          void Measure_MEMS()
C51 COMPILER V8.02   DETECT                                                                11/12/2010 16:57:35 PAGE 7   

 365          {
 366   1          char old_SFRPAGE = SFRPAGE;      // Store current SFRPAGE
 367   1      
 368   1              IE = 0x90;                               //开中断;all pages 
 369   1      
 370   1           send_char_com0(0xa2);            //设置为单次输出方式
 371   1           Delay_ms(30);                          //等待20个字节数据接收完成
 372   1               if(read_flag0 == 1)              //如果取数完成
 373   1                {
 374   2                 read_flag0 = 0;                               //清取数标志
 375   2                 count0 = 0;                                   //清计数值
 376   2            }
 377   1               else                           //如果取数没有完成
 378   1              read_flag0 = 2;               //取数未完成标志    
 379   1         
 380   1              IE = 0x00;                           //关中断
 381   1              outbuf1[8] = inbuf0[16];                 //转存
 382   1              outbuf1[9] = inbuf0[17];
 383   1      
 384   1              SFRPAGE = old_SFRPAGE;           // restore SFRPAGE
 385   1      }
 386          //***********************************************
 387          //主函数
 388          //***********************************************
 389          
 390          void main()
 391          { 
 392   1         Init_Device();
 393   1         read_flag0 = 0;
 394   1         count0=0;
 395   1              
 396   1         Delay_ms(2000);     //等待器件稳定
 397   1         while(1)
 398   1         { 
 399   2          Measure_MEMS();
 400   2          if(read_flag0 == 2)              //如果取数未完成
 401   2                 continue;                                     //进入下次循环
 402   2              Measure_angle();
 403   2              send_string_com1(outbuf1,OUTBUF_LEN);            //输出
 404   2          send_char_com1(0x0a);
 405   2          send_char_com1(0x0d);
 406   2          Delay_ms(200);                       
 407   2         }                                                             //end of while
 408   1      }                                                                        //end of main
 409          
 410          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    665    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
